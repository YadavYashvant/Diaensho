<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/diaensho/viewmodel/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/diaensho/viewmodel/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.diaensho.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.diaensho.data.db.entity.DiaryEntryEntity&#10;import com.example.diaensho.data.db.entity.AppUsageStatEntity&#10;import com.example.diaensho.data.repository.MainRepository&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val repository: MainRepository&#10;) : ViewModel() {&#10;    private val _entries = MutableStateFlow&lt;List&lt;DiaryEntryEntity&gt;&gt;(emptyList())&#10;    val entries: StateFlow&lt;List&lt;DiaryEntryEntity&gt;&gt; = _entries.asStateFlow()&#10;&#10;    private val _appUsageStats = MutableStateFlow&lt;List&lt;AppUsageStatEntity&gt;&gt;(emptyList())&#10;    val appUsageStats: StateFlow&lt;List&lt;AppUsageStatEntity&gt;&gt; = _appUsageStats.asStateFlow()&#10;&#10;    private var currentDate: LocalDate = LocalDate.now()&#10;&#10;    init {&#10;        loadDataForDate(currentDate)&#10;    }&#10;&#10;    fun loadDataForDate(date: LocalDate) {&#10;        currentDate = date&#10;        viewModelScope.launch {&#10;            // Load diary entries&#10;            repository.getDiaryEntriesForDate(date).collect {&#10;                _entries.value = it&#10;            }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load app usage stats&#10;            repository.getAppUsageStatsForDate(date).collect {&#10;                _appUsageStats.value = it.sortedByDescending { stat -&gt; stat.totalTimeInForeground }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.diaensho.viewmodel&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.diaensho.data.db.entity.DiaryEntryEntity&#10;import com.example.diaensho.data.db.entity.AppUsageStatEntity&#10;import com.example.diaensho.data.repository.MainRepository&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val repository: MainRepository&#10;) : ViewModel() {&#10;    private val _entries = MutableStateFlow&lt;List&lt;DiaryEntryEntity&gt;&gt;(emptyList())&#10;    val entries: StateFlow&lt;List&lt;DiaryEntryEntity&gt;&gt; = _entries.asStateFlow()&#10;&#10;    private val _appUsageStats = MutableStateFlow&lt;List&lt;AppUsageStatEntity&gt;&gt;(emptyList())&#10;    val appUsageStats: StateFlow&lt;List&lt;AppUsageStatEntity&gt;&gt; = _appUsageStats.asStateFlow()&#10;&#10;    private var currentDate: LocalDate = LocalDate.now()&#10;&#10;    init {&#10;        Log.d(&quot;HomeViewModel&quot;, &quot;Initializing HomeViewModel for date: $currentDate&quot;)&#10;        loadDataForDate(currentDate)&#10;    }&#10;&#10;    fun loadDataForDate(date: LocalDate) {&#10;        Log.d(&quot;HomeViewModel&quot;, &quot;Loading data for date: $date&quot;)&#10;        currentDate = date&#10;&#10;        viewModelScope.launch {&#10;            // Load diary entries&#10;            Log.d(&quot;HomeViewModel&quot;, &quot;Starting to load diary entries for: $date&quot;)&#10;            repository.getDiaryEntriesForDate(date).collect { entriesList -&gt;&#10;                Log.d(&quot;HomeViewModel&quot;, &quot;Received ${entriesList.size} diary entries for $date&quot;)&#10;                entriesList.forEach { entry -&gt;&#10;                    Log.v(&quot;HomeViewModel&quot;, &quot;Entry ID: ${entry.id}, Text: '${entry.text.take(50)}...', Time: ${entry.timestamp}&quot;)&#10;                }&#10;                _entries.value = entriesList&#10;            }&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            // Load app usage stats&#10;            Log.d(&quot;HomeViewModel&quot;, &quot;Starting to load app usage stats for: $date&quot;)&#10;            repository.getAppUsageStatsForDate(date).collect { statsList -&gt;&#10;                Log.d(&quot;HomeViewModel&quot;, &quot;Received ${statsList.size} app usage stats for $date&quot;)&#10;                _appUsageStats.value = statsList.sortedByDescending { stat -&gt; stat.totalTimeInForeground }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>